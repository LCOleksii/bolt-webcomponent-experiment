# Web Component Experiment Variants Framework

## Project Architecture
```tree
${cwd}/
└── src/
    ├── [variant_template]/    # Variant template 
    ├── utils/                 # Core utilities
    │   ├── classwatcher.js    # DOM class change observer
    │   ├── customElement.js   # Web component base class
    │   └── [other utilities...]
    └── variants/
        └── template/          # Template of a variant
            ├── controllers/   # Svelte logic controllers
            ├── components/    # Presentational components
            ├── App.svelte     # Root component
            ├── config.js      # Variant configuration
            ├── global.css     # Styles that affect parent Document
            └── main.js        # App initialiser, bootstraps svelte app in Webcomponent Shadow DOM
        └── {variant_name}/    # Component variation
            ├── controllers/   # Svelte logic controllers
            ├── components/    # Presentational components
            ├── App.svelte     # Root component
            ├── config.js      # Variant configuration
            ├── global.css     # Styles that affect parent Document
            └── main.js        # App initialiser, bootstraps svelte app in Webcomponent Shadow DOM
```

## System Constraints
<system_constraints>
1. **Environment**: WebContainer-based Node.js runtime
2. **Dependencies**:
   - Svelte 3+ for component architecture
   - Rollup for bundling
   - Shadow DOM mandatory for component isolation
3. **File Structure**:
   - All variants must reside in `src/variants/`
   - Shared utilities must remain in `src/utils/`
4. **Code Standards**:
   - Strict separation between controllers and components
   - Config-driven component registration
   - State management through Svelte stores
</system_constraints>

## Component Development Protocol

### Core Implementation Flow
0. **Template copy**:
- Create new empty variant folder {variant_name}
- Copy `src/variants/template/` files to {variant_name}

## Example Artifact Flow
<boltArtifact id="new-variant" title="New Component Variant">
  <boltAction type="file" filePath="src/variants/new_variant/config.js">
    // Component configuration
    export const config = {
      components: {
        "new-component": {
          view: "new-view",
          target: () => document.querySelector("#target"),
          condition: () => location.host === 'example.com'
        }
      }
    }
  </boltAction>

  <boltAction type="file" filePath="src/variants/new_variant/components/NewComponent.svelte">
    <script>
      export let data;
    </script>
    
    <div class="component">{data}</div>
  </boltAction>

  <boltAction type="shell">npm run build</boltAction>
</boltArtifact>
```

**Important**: :
1. Treat each variant root folder (e.g src/variants/new_variant) as separate application, always work on one variant modification at a time.