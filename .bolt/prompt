# Web Component Extension Guide

## Project Structure of ~/project
```
├── src/
│   ├── utils/                    # Shared utility functions
│   │   ├── classwatcher.js      # DOM class change observer
│   │   ├── common.js            # Common helper functions
│   │   ├── cookies.js           # Cookie management
│   │   ├── customElement.js     # Web component setup
│   │   ├── dom.js               # DOM manipulation
│   │   ├── store.js             # State management
│   │   └── targeting.js         # Component targeting logic
│   └── variants/                # Component variants
│       └── {variant_name}/           # Experiment variation root folder
│           ├── controllers/     # Svelte components should be created in this folder
│           ├── App.svelte       # Main component
│           ├── config.js        # Variant configuration
│           ├── global.css       # Global styles
│           ├── main.js          # Entry point
│           └── webcomponent.js  # Web component registration
├── rollup.config.js             # Build configuration
├── rollup.script.js             # Build utilities
├── package.json                 # Dependencies
└── tampermonkey.config          # Development testing
```

## Project Overview
This is a Svelte-based web component system supporting multiple variants with a Rollup build pipeline.
The project has two main sections:

### Core Utilities (src/utils/):
src/utils/classwatcher.js: Monitors DOM element class changes
src/utils/common.js: Generic helper functions
src/utils/cookies.js: Cookie operations
src/utils/customElement.js: Custom web component implementation
src/utils/dom.js: DOM manipulation utilities
src/utils/store.js: State management system


#### Variants Folders (src/variants/*):
Each variant folder {variant_name} (e.g., variant_1/) contains full set of functionality to 
implement the UI and logic using Svelte components and wrap it with Webcomponent wrapper and render it on the page:

src/variants/{variant_name}/controllers/: Svelte controllers implementations can be used to wrap logically various components and functions of the UI 
src/variants/{variant_name}/components/: Svelte components implementations
src/variants/{variant_name}/App.svelte: Root component that manages views

src/variants/{variant_name}/config.js: Component configuration and targeting rules, 
src/variants/{variant_name}/global.css: Global styles that are axposed to parent document
src/variants/{variant_name}/main.js: the entrypoint to render Svelte App inside Shadow DOM of Webcomponent 
src/variants/{variant_name}/webcomponent.js: Web component registration and attacing to the DOM script (this is the file from which the result bundle is generated)

### Supporting files:
rollup.config.js: Build system settings
rollup.script.js: Build helper functions
package.json: Project dependencies
tampermonkey.config: Development environment setup


## Core Concepts
1. Component Registration: Components are registered via `customElements.define()` with a configuration-driven approach
2. Variants: Each variant lives in `src/variants/{variant_name}` with its own bundle
3. State Management: Uses Svelte stores with global state sync
4. Shadow DOM: Components are isolated using Shadow DOM with styles/scripts injection

## Adding New Features

### New WebComponent configuration
```javascript
// 1. Add component config in src/variants/{variant_name}/config.js
export let config = {
    components: {
        "new-component": { /* id of the component used as "id" attribute when component is attached */ 
            initialised: false, /* when Svelte app inside webcomponent is initialised changes to true */ 
            where: "beforebegin", /* the rule of how to insertAdjacentHTML to target element */
            view: "newview", /* name of the view which is used to switch different views inside App.svelte */
            target: () => document.querySelector(".target"), /* DOM element to be used on Webcomponent connect */
            condition: () => true /* function that can be used to check different targeting conditions (e.g domain name, user login status)*/
        }
    }
}

// 2. Create Svelte component
// populate functionality
// src/variants/{variant_name}/components/NewComponent.svelte
<script>
    export let name = "";
</script>
<div class="component">{name}</div>

// 3. Create Svelte controller to use components
// populate functionality
// src/variants/{variant_name}/controllers/NewController.svelte
<script>
    import NewComponent from "../components/NewComponent.svelte";
    export let name = "";
</script>
<div class="controller"><NewComponent name="{name}"/></div>

// 3. Update App.svelte to include new view
{#if view==="newview"}
    <NewController name="{view}"/>
{/if}
```

### New Functionality
1. Utilities: Can be added to `src/utils/`
2. Stores: Extend `src/utils/store.js` to populate Svelte store to be used in svelte app
3. Configuration: Update `src/variants/{variant_name}/config.js`

### Build Process
1. Development: `npm run dev`
2. Production: `npm run build`
3. Local testing: Enable via TamperMonkey script

### Best Practices
1. Always use Shadow DOM for component isolation, 
2. Always use .svelte files for the UI and app functionality
2. Follow the existing project structure pattern
3. Keep variant-specific code in variant directories
4. Use the targeting system for component insertion
5. Leverage the ClassWatcher and for DOM updates
6. Always for existing files modify only sections in between <MOD id="{modification id}"></MOD>